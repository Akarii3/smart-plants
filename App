import kivy
from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.image import Image
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.popup import Popup
from kivy.uix.widget import Widget
from kivy.core.window import Window
from plyer import filechooser
import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing import image

kivy.require('2.1.0')  # Ensure the right Kivy version

# Load the TensorFlow Lite model (assuming it's in the current directory)
interpreter = tf.lite.Interpreter(model_path="plant_classification_cnn.tflite")
interpreter.allocate_tensors()

# Get input and output tensor details
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Plant details dictionary
plant_details = {
    "Healthy Aglaonema": {
        "description": "Scientific name: Aglaonema. Known for its attractive variegated leaves, this plant has vibrant green leaves with silver or white streaks. It thrives in low to medium light and tolerates some neglect.",
        "soil_moisture_range": "Moderate moisture (40% - 60%). Prefers well-drained, slightly acidic soil. Avoid waterlogging."
    },
    "Unhealthy Aglaonema": {
        "description": "Unhealthy Aglaonema shows signs of yellowing or browning of leaves, particularly around the edges, and wilting due to overwatering or underwatering.",
        "soil_moisture_range": "Moderate moisture (40% - 60%). Overwatering or poor drainage can lead to root rot."
    },
    "Healthy Aloe Vera": {
        "description": "Scientific name: Aloe vera. A succulent with thick, fleshy, spiky leaves that are green to gray-green. Known for its medicinal properties, it thrives in full sun and requires minimal care.",
        "soil_moisture_range": "Low moisture (10% - 30%). Prefers well-drained, sandy or loamy soil. Avoid waterlogging."
    },
    "Unhealthy Aloe Vera": {
        "description": "Unhealthy Aloe vera may show wrinkled, discolored, or drooping leaves, usually due to under-watering or root rot from over-watering.",
        "soil_moisture_range": "Low moisture (10% - 30%). Ensure soil drains well to avoid root rot from excess moisture."
    },
    "Healthy Arrowhead": {
        "description": "Scientific name: Syngonium podophyllum. An ornamental plant with arrow-shaped leaves that thrive in moderate light. Healthy plants have vibrant, firm green leaves.",
        "soil_moisture_range": "Moderate moisture (40% - 60%). Prefers well-drained, lightly moist soil. Keep soil consistently moist but not waterlogged."
    },
    "Unhealthy Arrowhead": {
        "description": "Unhealthy Arrowhead plants may have yellowing leaves, brown leaf tips, or wilting due to inconsistent watering or lack of sunlight.",
        "soil_moisture_range": "Moderate moisture (40% - 60%). Ensure consistent watering and avoid drying out between waterings."
    },
    "Healthy Arrowroot": {
        "description": "Scientific name: Maranta arundinacea. Known for its oval leaves with dark green and red veins, Arrowroot thrives in moderate light. Healthy plants have smooth, vibrant leaves.",
        "soil_moisture_range": "Moderate moisture (40% - 60%). Prefers well-drained, slightly moist soil. Keep soil evenly moist."
    },
    "Healthy Butterfly Pea": {
        "description": "Scientific name: Clitoria ternatea. Known for its vibrant blue flowers, this climbing plant grows best in full sun. Healthy plants produce lush green foliage and abundant flowers.",
        "soil_moisture_range": "Moderate moisture (40% - 60%). Prefers well-drained soil and should be watered consistently. Avoid waterlogging."
    },
    "Healthy Golden Pothos": {
        "description": "Scientific name: Epipremnum aureum. Known for its heart-shaped, glossy leaves with green and yellow variegation. It thrives in low to moderate light.",
        "soil_moisture_range": "Moderate moisture (40% - 60%). Prefers well-drained, slightly moist soil. Avoid soggy soil."
    },
    "Healthy Snake Plant": {
        "description": "Scientific name: Sansevieria trifasciata. Known for its upright, sword-shaped leaves with green and light green stripes. Very tolerant of neglect and low light.",
        "soil_moisture_range": "Low moisture (10% - 30%). Prefers well-drained, sandy soil. Avoid overwatering to prevent root rot."
    },
    "Unhealthy Snake Plant": {
        "description": "Unhealthy Snake Plants may have yellowing or soft leaves due to overwatering or insufficient light.",
        "soil_moisture_range": "Low moisture (10% - 30%). Ensure good drainage to avoid root rot from overwatering."
    },
    "Healthy Swiss Cheese Plant": {
        "description": "Scientific name: Monstera adansonii. Known for its large, glossy leaves with holes (fenestrations), it grows well when supported by a trellis. Healthy plants have lush, dark green foliage.",
        "soil_moisture_range": "Moderate moisture (40% - 60%). Prefers well-draining, slightly moist soil. Avoid letting the soil dry out completely."
    },
    "Unhealthy Swiss Cheese Plant": {
        "description": "Unhealthy Swiss Cheese Plants may have yellowing leaves, poor growth, or browning edges due to improper lighting, watering, or pests.",
        "soil_moisture_range": "Moderate moisture (40% - 60%). Ensure even moisture and avoid excess moisture or drying out."
    }
}


class Smart_PlantsApp(App):
    def build(self):
        # Set up the layout
        layout = BoxLayout(orientation='vertical')
        
        # Add button to choose image
        self.select_button = Button(text="Select Image")
        self.select_button.bind(on_release=self.open_filechooser)
        
        # Add label to show prediction
        self.result_label = Label(text="Prediction: None", size_hint=(1, 0.1))
        
        # Add label to show plant details
        self.details_label = Label(text="Plant details will be shown here.", size_hint=(1, 0.2))
        
        # Add the image widget to display the selected image
        self.image_widget = Image(size_hint=(1, 0.6), allow_stretch=True)

        layout.add_widget(self.select_button)
        layout.add_widget(self.result_label)
        layout.add_widget(self.details_label)
        layout.add_widget(self.image_widget)
        
        return layout

    def open_filechooser(self, instance):
        # Open file chooser to select an image
        filechooser.open_file(on_selection=self.on_file_selected)

    def on_file_selected(self, selection):
        if selection:
            # Get the selected file path
            image_path = selection[0]
            print(f"Selected image: {image_path}")

            # Load and display the selected image
            self.image_widget.source = image_path

            # Classify the image
            self.classify_image(image_path)

    def classify_image(self, image_path):
        # Load the image using Keras image loader
        img = image.load_img(image_path, target_size=(224, 224))
        img_array = image.img_to_array(img) / 255.0  # Normalize the image
        img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
        
        # Set the input tensor
        input_index = input_details[0]['index']
        interpreter.set_tensor(input_index, img_array.astype(np.float32))

        # Run inference
        interpreter.invoke()

        # Get the output tensor
        output_index = output_details[0]['index']
        output_data = interpreter.get_tensor(output_index)

        # Get the predicted class label
        predicted_class = np.argmax(output_data, axis=1)

        # Map the predicted class to the actual class names (update with your actual class names)
        class_names = ['Healthy Aglaonema', 'Healthy Aloe vera', 'Healthy Arrowhead', 
			   'Healthy Arrowroot', 'Healthy Butterfly pea', 'Healthy Golden Pothos',  
			   'Healthy Snake plant', 'Healthy Swiss cheese plant', 'Unhealthy Aglaonema',  
			   'Unhealthy Aloe Vera', 'Unhealthy Arrowhead', 'Unhealthy Snake Plant', 
			   'Unhealthy Swiss cheese plant']
        
        predicted_label = class_names[predicted_class[0]]
        print(f"Predicted class: {predicted_label}")
        
        # Display the prediction on the screen
        self.result_label.text = f"Prediction: {predicted_label}"

        # Display the plant details
        self.show_plant_details(predicted_label)

    def show_plant_details(self, plant_name):
        # Get the details for the predicted plant
        if plant_name in plant_details:
            plant_info = plant_details[plant_name]
            description = plant_info["description"]
            soil_moisture = plant_info["soil_moisture_range"]
            self.details_label.text = f"Description: {description}\nSoil Moisture Range: {soil_moisture}"
        else:
            self.details_label.text = "No details available for this plant."

if __name__ == '__main__':
    Smart_PlantsApp().run()
